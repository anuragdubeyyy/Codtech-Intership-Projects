#DESIGN A RESTFUL API FOR A LIBRARY OR INVENTORY SYSTEM, IMPLEMENTING CRUD OPERATIONS. DELIVERABLE: API DOCUMENTATION AND CODE WITH FUNCTIONAL ENDPOINTS.

//*API Documentation*//
//Base URL
arduino
https://api.librarysystem.com/v1
//Endpoints
//Create a new book/item
//POST /books

//Request Body:
json
Copy
{
  "title": "Book Title",
  "author": "Author Name",
  "genre": "Fiction",
  "publishedYear": 2020,
  "quantity": 5
}
//Response (201 - Created):
json
Copy
{
  "message": "Book created successfully",
  "book": {
    "id": "book_id",
    "title": "Book Title",
    "author": "Author Name",
    "genre": "Fiction",
    "publishedYear": 2020,
    "quantity": 5
  }
}
//Get all books/items
//GET /books
//Response (200 - OK):
json
Copy
[
  {
    "id": "book_id_1",
    "title": "Book Title 1",
    "author": "Author 1",
    "genre": "Fiction",
    "publishedYear": 2020,
    "quantity": 5
  },
  {
    "id": "book_id_2",
    "title": "Book Title 2",
    "author": "Author 2",
    "genre": "Non-Fiction",
    "publishedYear": 2019,
    "quantity": 3
  }
]
//Get a specific book/item by ID
//GET /books/{id}
//Response (200 - OK):

json
Copy
{
  "id": "book_id",
  "title": "Book Title",
  "author": "Author Name",
  "genre": "Fiction",
  "publishedYear": 2020,
  "quantity": 5
}
//Update a specific book/item
//PUT /books/{id}

//Request Body:
json
Copy
{
  "title": "Updated Book Title",
  "author": "Updated Author",
  "genre": "Sci-Fi",
  "publishedYear": 2021,
  "quantity": 10
}
//Response (200 - OK):
json
Copy
{
  "message": "Book updated successfully",
  "book": {
    "id": "book_id",
    "title": "Updated Book Title",
    "author": "Updated Author",
    "genre": "Sci-Fi",
    "publishedYear": 2021,
    "quantity": 10
  }
}
//Delete a specific book/item
//DELETE /books/{id}

//Response (200 - OK):
json
Copy
{
  "message": "Book deleted successfully"
}
//Code Implementation (Node.js with Express and MongoDB)
//Install Dependencies:
//First, install necessary packages:

bash
Copy
npm init -y
npm install express mongoose body-parser
//Set up the Server (server.js):
//javascript
Copy
const express = require('express');
const mongoose = require('mongoose');
const bodyParser = require('body-parser');
const app = express();

// Middleware
app.use(bodyParser.json());

// Connect to MongoDB
mongoose.connect('mongodb://localhost/library', {
  useNewUrlParser: true,
  useUnifiedTopology: true,
})
.then(() => console.log('Connected to MongoDB'))
.catch((err) => console.log('Error connecting to MongoDB:', err));

// Define Book Schema and Model
const bookSchema = new mongoose.Schema({
  title: String,
  author: String,
  genre: String,
  publishedYear: Number,
  quantity: Number,
});

const Book = mongoose.model('Book', bookSchema);

// Create a new book
app.post('/books', async (req, res) => {
  const { title, author, genre, publishedYear, quantity } = req.body;
  try {
    const newBook = new Book({
      title,
      author,
      genre,
      publishedYear,
      quantity,
    });
    await newBook.save();
    res.status(201).json({
      message: 'Book created successfully',
      book: newBook,
    });
  } catch (err) {
    res.status(400).json({ message: 'Error creating book', error: err });
  }
});

// Get all books
app.get('/books', async (req, res) => {
  try {
    const books = await Book.find();
    res.status(200).json(books);
  } catch (err) {
    res.status(500).json({ message: 'Error fetching books', error: err });
  }
});

// Get a book by ID
app.get('/books/:id', async (req, res) => {
  try {
    const book = await Book.findById(req.params.id);
    if (!book) return res.status(404).json({ message: 'Book not found' });
    res.status(200).json(book);
  } catch (err) {
    res.status(500).json({ message: 'Error fetching book', error: err });
  }
});

// Update a book by ID
app.put('/books/:id', async (req, res) => {
  try {
    const { title, author, genre, publishedYear, quantity } = req.body;
    const updatedBook = await Book.findByIdAndUpdate(
      req.params.id,
      { title, author, genre, publishedYear, quantity },
      { new: true }
    );
    if (!updatedBook) return res.status(404).json({ message: 'Book not found' });
    res.status(200).json({
      message: 'Book updated successfully',
      book: updatedBook,
    });
  } catch (err) {
    res.status(500).json({ message: 'Error updating book', error: err });
  }
});

// Delete a book by ID
app.delete('/books/:id', async (req, res) => {
  try {
    const deletedBook = await Book.findByIdAndDelete(req.params.id);
    if (!deletedBook) return res.status(404).json({ message: 'Book not found' });
    res.status(200).json({ message: 'Book deleted successfully' });
  } catch (err) {
    res.status(500).json({ message: 'Error deleting book', error: err });
  }
});

// Start server
const PORT = process.env.PORT || 3000;
app.listen(PORT, () => {
  console.log(`Server running on port ${PORT}`);
});
//Explanation of the Code:
Express Setup:
//The app uses Express.js for routing and MongoDB as the database for storing book data.
//MongoDB Schema & Model:
//bookSchema defines the structure of the "books" collection in MongoDB.
CRUD Operations:
//POST /books creates a new book in the database.
//GET /books fetches all books.
//GET /books/:id fetches a specific book by its ID.
//PUT /books/:id updates a specific book's details.
DELETE /books/:id deletes a specific book.
//Running the API:
//Start the Server:
Run node server.js to start the server.
//Testing the API:
//You can test the API using tools like Postman or curl commands.
Example Curl Requests:
Create a Book:

bash
curl -X POST http://localhost:3000/books -H "Content-Type: application/json" -d '{
  "title": "The Great Gatsby",
  "author": "F. Scott Fitzgerald",
  "genre": "Fiction",
  "publishedYear": 1925,
  "quantity": 5
}'
Get All Books:

bash
curl http://localhost:3000/books
Get a Book by ID:

bash
Copy
curl http://localhost:3000/books/<book_id>
Update a Book:

bash
curl -X PUT http://localhost:3000/books/<book_id> -H "Content-Type: application/json" -d '{
  "title": "The Great Gatsby (Updated)",
  "author": "F. Scott Fitzgerald",
  "genre": "Classics",
  "publishedYear": 1925,
  "quantity": 10
}'
Delete a Book:

bash
curl -X DELETE http://localhost:3000/books/<book_id>
