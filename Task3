//REAL-TIME COLLABORATION TOOL//
//Creating a collaborative tool for coding or note-taking similar to Google Docs using WebSockets for real-time updates involves several components:

//Frontend: A web-based interface where users can collaborate.
//Backend: A WebSocket server that handles real-time communication between users.
//Database: A storage system to save the content, such as a shared document.
//Technologies Used:
//Frontend: HTML, CSS, JavaScript (with React for UI)
//Backend: Node.js with WebSocket (using ws library)
//Database: MongoDB (to store the document data)
//Authentication: Basic token-based authentication for users (optional)


//1. Backend Setup (Node.js + WebSockets)
//Install Dependencies:

bash
npm init -y
npm install express ws mongoose body-parser

//Create the WebSocket Server (server.js):
//javascript
const express = require('express');
const WebSocket = require('ws');
const mongoose = require('mongoose');
const bodyParser = require('body-parser');

const app = express();
const PORT = 3000;

app.use(bodyParser.json());

// MongoDB connection
mongoose.connect('mongodb://localhost/collaborative-tool', {
  useNewUrlParser: true,
  useUnifiedTopology: true,
});

// Document Schema for MongoDB
const documentSchema = new mongoose.Schema({
  content: String,
});

const Document = mongoose.model('Document', documentSchema);

// WebSocket Server
const wss = new WebSocket.Server({ noServer: true });

wss.on('connection', (ws) => {
  // Send the initial content of the document to the new user
  Document.findOne({}, (err, document) => {
    if (err) {
      console.error(err);
      return;
    }
    if (document) {
      ws.send(JSON.stringify({ type: 'init', content: document.content }));
    }
  });

  // Handle incoming messages (real-time edits)
  ws.on('message', (message) => {
    const data = JSON.parse(message);

    if (data.type === 'edit') {
      // Broadcast the edit to all connected clients
      wss.clients.forEach((client) => {
        if (client.readyState === WebSocket.OPEN) {
          client.send(JSON.stringify(data));
        }
      });

      // Save the content to the database
      Document.findOne({}, (err, document) => {
        if (err) {
          console.error(err);
          return;
        }
        if (document) {
          document.content = data.content;
          document.save();
        }
      });
    }
  });

  ws.on('close', () => {
    console.log('Client disconnected');
  });
});

// HTTP server to handle initial requests (like serving frontend)
const server = app.listen(PORT, () => {
  console.log(`Server running on http://localhost:${PORT}`);
});

// Integrate WebSocket with HTTP server
server.on('upgrade', (request, socket, head) => {
  wss.handleUpgrade(request, socket, head, (ws) => {
    wss.emit('connection', ws, request);
  });
});
//Backend Explanation:
WebSocket Server: We use WebSocket (ws library) to handle real-time communication between clients. When one user edits the document, the changes are broadcast to all other connected users.
MongoDB: The document's content is saved in MongoDB. Every time an edit is made, the content is updated in the database.
Express: The server is built with Express to handle HTTP requests for the frontend.
//2. Frontend Setup (React + WebSocket)//
//Create React App:

bash
npx create-react-app collaborative-frontend
cd collaborative-frontend
npm install websocket
Create the Document Editor (App.js):

//javascript
import React, { useState, useEffect } from 'react';

const App = () => {
  const [content, setContent] = useState('');
  const [ws, setWs] = useState(null);

  useEffect(() => {
    const socket = new WebSocket('ws://localhost:3000');
    setWs(socket);

    socket.onmessage = (event) => {
      const data = JSON.parse(event.data);

      // If it's an 'init' message, set initial content
      if (data.type === 'init') {
        setContent(data.content);
      } else if (data.type === 'edit') {
        // Update content in real-time when another user edits
        setContent(data.content);
      }
    };

    // Cleanup when component unmounts
    return () => {
      socket.close();
    };
  }, []);

  // Handle content change (for real-time editing)
  const handleChange = (e) => {
    const newContent = e.target.value;
    setContent(newContent);

    // Send the updated content to the server
    if (ws && ws.readyState === WebSocket.OPEN) {
      ws.send(
        JSON.stringify({
          type: 'edit',
          content: newContent,
        })
      );
    }
  };

  return (
    <div className="App">
      <h1>Collaborative Editor</h1>
      <textarea
        value={content}
        onChange={handleChange}
        rows="20"
        cols="80"
      ></textarea>
    </div>
  );
};
export default App;

//Frontend Explanation:
//WebSocket Connection: The app connects to the WebSocket server using the ws library, allowing real-time communication between users.
//Content Sync: Every time a user types in the editor (textarea), the content is updated and sent to the WebSocket server, which then broadcasts the update to all connected users.
//Real-time Updates: When the server sends an update (for example, from another user), the frontend receives it and updates the content accordingly.
//3. Running the Application:
//Backend:
//Start the backend server:
bash
node server.js

//Frontend:
//Start the frontend app:
bash
npm start
//This will launch the app on http://localhost:3000. You can open multiple browser windows or tabs to simulate multiple users//
